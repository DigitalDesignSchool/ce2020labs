`include "config.vh"

module top
# (
    parameter clk_mhz = 50,
              strobe_to_update_xy_counter_width = 20
)
(
    input         clk,
    input  [ 3:0] key,
    input  [ 3:0] sw,
    output [ 7:0] led,

    output [ 7:0] abcdefgh,
    output [ 7:0] digit,

    output        vsync,
    output        hsync,
    output [ 2:0] rgb,

    output        buzzer,
    inout  [15:0] gpio
);

    wire   reset  = ~ key [3];
    assign buzzer = ~ reset;

    //------------------------------------------------------------------------

    wire [15:0] value;

    pmod_mic3_spi_receiver i_microphone
    (
        .clock ( clk        ),
        .reset ( reset      ),
        .cs    ( gpio  [14] ),
        .sck   ( gpio  [ 8] ),
        .sdo   ( gpio  [10] ),
        .value ( value      )
    );

    assign gpio [4] = 1'b1;  // VCC
    assign gpio [6] = 1'b0;  // GND

    //------------------------------------------------------------------------

    localparam n_filter_stages = 16;

    reg [15:0] filter_stages [0:n_filter_stages - 1];
    integer i;

    always @ (posedge clk)
    begin
        for (i = 1; i < n_filter_stages; i = i + 1)
            filter_stages [i] <= filter_stages [i - 1];

        filter_stages [0] <= value;
    end

    //------------------------------------------------------------------------

    reg [15:0] n_filtered_value, filtered_value;

    always @*
    begin
        n_filtered_value = filter_stages [0];

        for (i = 1; i < n_filter_stages; i = i + 1)
            n_filtered_value = n_filtered_value + filter_stages [i];

        n_filtered_value = n_filtered_value / n_filter_stages;
    end

    always @ (posedge clk)
        filtered_value <= n_filtered_value;

    //------------------------------------------------------------------------

    assign led = ~ filtered_value [13:6];

    //------------------------------------------------------------------------

    reg [15:0] prev_filtered_value;
    reg [31:0] counter;
    reg [31:0] distance;

    localparam [15:0] threshold = 16'h1000;

    always @ (posedge clk or posedge reset)
        if (reset)
        begin
            prev_filtered_value <= 16'h0;
            counter    <= 32'h0;
            distance   <= 32'h0;
        end
        else
        begin
            prev_filtered_value <= filtered_value;

            if (  filtered_value      > threshold
                & prev_filtered_value < threshold)
            begin
               distance <= counter;
               counter  <= 32'h0;
            end
            else
            begin
               counter <= counter + 32'h1;
            end
        end

    //------------------------------------------------------------------------

    seven_segment_8_digits i_display
    (
        .clock    ( clk      ),
        .reset    ( reset    ),
        .number   ( distance ),

        .abcdefgh ( abcdefgh ),
        .digit    ( digit    )
    );

endmodule
